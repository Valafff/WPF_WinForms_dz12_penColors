using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Net.NetworkInformation;
using System.Text;
using System.Threading.Tasks;

namespace Dz_12_WPF_PenTest
{
	partial class Color : INotifyPropertyChanged
	{
		byte alpha = 255;
		public byte Alpha
		{
			get => alpha;
			set
			{
				if (alpha != value)
				{
					alpha = value;
					OnPropertyChanged(new PropertyChangedEventArgs(nameof(Alpha)));
					SelectedColor = string.Format("#{0:X2}{1:X2}{2:X2}{3:X2}", Alpha, Red, Green, Blue);
				}
			}
		}



		byte red = 255;
        public byte Red 
		{ get => red; 
		  set
			{
				if (red != value)
				{
					red = value;
					OnPropertyChanged(new PropertyChangedEventArgs(nameof(Red)));
					SelectedColor = string.Format("#{0:X2}{1:X2}{2:X2}{3:X2}", Alpha, Red, Green, Blue);
				}
			}
		}

		byte green = 255;
		public byte Green
		{ get => green;
		  set
			{
				if (green != value)
				{
					green = value;
					OnPropertyChanged(new PropertyChangedEventArgs(nameof(Green)));
					SelectedColor = string.Format("#{0:X2}{1:X2}{2:X2}{3:X2}", Alpha, Red, Green, Blue);
				}
			}
		}
		byte blue = 255;
		public byte Blue
		{
			get => blue;
			set
			{
				if (blue != value)
				{
					blue = value;
					OnPropertyChanged(new PropertyChangedEventArgs(nameof(Blue)));
					SelectedColor = string.Format("#{0:X2}{1:X2}{2:X2}{3:X2}", Alpha, Red, Green, Blue);
				}
			}
		}

		string selectedColor = "Red";
		public string SelectedColor
		{
			get => selectedColor;
			set
			{
				if (!selectedColor.Equals(value))
				{
					selectedColor = value;
					OnPropertyChanged(new PropertyChangedEventArgs(nameof(SelectedColor)));
				}
			}
		}

		public Color()
		{
			Alpha = 255;
			Red = 128;
			Green = 128;
			Blue = 128;
			SelectedColor = string.Format("#{0:X2}{1:X2}{2:X2}{3:X2}", Alpha, Red, Green, Blue);
		}

		public event PropertyChangedEventHandler PropertyChanged;

		private void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			PropertyChanged?.Invoke(this, e);
		}
	}
}
